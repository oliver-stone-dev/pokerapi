// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokerAppAPI.Resources;
using PokerAppAPI.Models;

#nullable disable

namespace PokerAppAPI.Migrations
{
    [DbContext(typeof(PokerDb))]
    partial class PokerDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("PokerAppAPI.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Chips")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PokerAppAPI.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeStamp")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("PokerAppAPI.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PotId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeStamp")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("PokerAppAPI.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BetStage")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BigBlind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BurnCards")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommunityCards")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrentBet")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DealerPosition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Deck")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovePosition")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Open")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pot")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SmallBlind")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("PokerAppAPI.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllIn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Cards")
                        .HasColumnType("TEXT");

                    b.Property<int>("Chips")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Folded")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("GameId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("PokerAppAPI.Pot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayersIds")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Pots");
                });

            modelBuilder.Entity("PokerAppAPI.Action", b =>
                {
                    b.HasOne("PokerAppAPI.Game", null)
                        .WithMany("Actions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerAppAPI.Player", null)
                        .WithMany("Actions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerAppAPI.Bet", b =>
                {
                    b.HasOne("PokerAppAPI.Game", null)
                        .WithMany("Bets")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerAppAPI.Player", null)
                        .WithMany("Bets")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerAppAPI.Player", b =>
                {
                    b.HasOne("PokerAppAPI.Account", null)
                        .WithMany("Players")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokerAppAPI.Game", null)
                        .WithMany("Players")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerAppAPI.Pot", b =>
                {
                    b.HasOne("PokerAppAPI.Game", null)
                        .WithMany("Pots")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokerAppAPI.Account", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("PokerAppAPI.Game", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Bets");

                    b.Navigation("Players");

                    b.Navigation("Pots");
                });

            modelBuilder.Entity("PokerAppAPI.Player", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Bets");
                });
#pragma warning restore 612, 618
        }
    }
}
